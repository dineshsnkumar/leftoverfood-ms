// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package leftoverfoods

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT user_id, username, first_name, last_name, street_name, city, country, zip_code, email_address, currency, created_at, updated_at FROM users
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.StreetName,
		&i.City,
		&i.Country,
		&i.ZipCode,
		&i.EmailAddress,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUser = `-- name: ListUser :many
SELECT user_id, username, first_name, last_name, street_name, city, country, zip_code, email_address, currency, created_at, updated_at FROM users
ORDER BY first_name
`

func (q *Queries) ListUser(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.FirstName,
			&i.LastName,
			&i.StreetName,
			&i.City,
			&i.Country,
			&i.ZipCode,
			&i.EmailAddress,
			&i.Currency,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
INSERT INTO users (
  username, first_name, last_name,country, email_address
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING user_id, username, first_name, last_name, street_name, city, country, zip_code, email_address, currency, created_at, updated_at
`

type UpdateUserParams struct {
	Username     pgtype.Text
	FirstName    pgtype.Text
	LastName     pgtype.Text
	Country      pgtype.Text
	EmailAddress pgtype.Text
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.Country,
		arg.EmailAddress,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.StreetName,
		&i.City,
		&i.Country,
		&i.ZipCode,
		&i.EmailAddress,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
